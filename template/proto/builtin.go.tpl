// Code generated by zero-api. DO NOT EDIT.

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"net/textproto"
	"regexp"
	"strconv"
	"strings"
)

type File struct {
	Filename    string
	Header      textproto.MIMEHeader
	Size        int64
	File        io.ReadCloser
	ContentType string
}

func (f *File) Read(p []byte) (n int, err error) {
	return f.File.Read(p)
}

func (f *File) Close() error {
	return f.File.Close()
}

func (f *File) FromBytes(data []byte, contentType string) {
	f.FromReader(bytes.NewReader(data), contentType)
}

func (f *File) FromReader(reader io.Reader, contentType string) {
	f.File = io.NopCloser(reader)
	f.ContentType = contentType
}

type ID int64

func (id ID) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf(`"%d"`, id)), nil
}

func (id *ID) UnmarshalJSON(data []byte) error {
	n, err := strconv.ParseInt(strings.Trim(string(data), `"`), 10, 64)
	*id = ID(n)
	return err
}

type UID uint64

func (uid UID) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf(`"%d"`, uid)), nil
}

func (uid *UID) UnmarshalJSON(data []byte) error {
	n, err := strconv.ParseUint(strings.Trim(string(data), `"`), 10, 64)
	*uid = UID(n)
	return err
}

type Phone string

// 验证手机号格式
func (phone Phone) verifyMobileFormat(phoneNumber string) bool {
	regular := "^((13[0-9])|(14[5,7])|(15[0-3,5-9])|(17[0,3,5-8])|(18[0-9])|166|198|199|(147))\\d{8}$"
	reg := regexp.MustCompile(regular)
	return reg.MatchString(string(phoneNumber))
}

func (phone Phone) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf(`"%s"`, phone)), nil
}

func (phone *Phone) UnmarshalJSON(data []byte) error {
	s := strings.Trim(string(data), `"`)
	if !phone.verifyMobileFormat(s) {
		return errors.New("invalid phone number")
	}
	*phone = Phone(s)
	return nil
}
