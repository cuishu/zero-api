// Code generated by zero-api. DO NOT EDIT.

package proto

import (
	"bytes"
	"encoding/json"
	"errors"
	"io"
	"net/textproto"
	"strconv"
	"strings"
	"time"

	"github.com/nyaruka/phonenumbers"
	"github.com/shopspring/decimal"
)

type Decimal struct { 
	decimal.Decimal
}

func (d *Decimal) Set(v decimal.Decimal) {
	*d = Decimal{v}
}

type Error struct {
	Code int
	Mesg string
}

func NewError(code int, mesg string) Error {
	return Error{
		Code: code,
		Mesg: mesg,
	}
}

func (err Error) Error() string {
	return err.Mesg
}

type File struct {
	Filename    string
	Header      textproto.MIMEHeader
	Size        int64
	File        io.ReadCloser
	ContentType string
}

func (f *File) Read(p []byte) (n int, err error) {
	return f.File.Read(p)
}

func (f *File) Close() error {
	return f.File.Close()
}

func (f *File) FromBytes(data []byte, contentType string) {
	f.FromReader(bytes.NewReader(data), contentType)
}

func (f *File) FromReader(reader io.Reader, contentType string) {
	f.File = io.NopCloser(reader)
	f.ContentType = contentType
}

type ID int64

func (id ID) MarshalJSON() ([]byte, error) {
	return []byte(`"` + strconv.FormatInt(int64(id), 10) + `"`, ), nil
}

func (id *ID) UnmarshalJSON(data []byte) error {
	n, err := strconv.ParseInt(strings.Trim(string(data), `"`), 10, 64)
	*id = ID(n)
	return err
}

type UID uint64

func (uid UID) MarshalJSON() ([]byte, error) {
	return []byte(`"` + strconv.FormatUint(uint64(uid), 10) + `"`, ), nil
}

func (uid *UID) UnmarshalJSON(data []byte) error {
	n, err := strconv.ParseUint(strings.Trim(string(data), `"`), 10, 64)
	*uid = UID(n)
	return err
}

type Phone struct {
	Regin  string `json:"regin"`
	Number string `json:"number"`
}

var ErrInvalidPhoneNumber = errors.New("invalid phone number")

func (phone *Phone) UnmarshalJSON(data []byte) error {
	var v struct {
		Regin  string `json:"regin"`
		Number string `json:"number"`
	}
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	v.Regin = strings.ToUpper(v.Regin)
	num, err := phonenumbers.Parse(v.Number, v.Regin)
	if err != nil {
		return err
	}
	if !phonenumbers.IsValidNumberForRegion(num, v.Regin) {
		return ErrInvalidPhoneNumber
	}
	phone.Regin = v.Regin
	phone.Number = phonenumbers.Format(num, phonenumbers.INTERNATIONAL)
	return nil
}

func (phone Phone) E164() string {
	num, _ := phonenumbers.Parse(phone.Number, phone.Regin)
	return phonenumbers.Format(num, phonenumbers.E164)
}

type Time time.Time

func (t Time) MarshalJSON() ([]byte, error) {
	return []byte(time.Time(t).Format(`"2006-01-02 15:04:05"`)), nil
}

func (t *Time) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse("2006-01-02 15:04:05", strings.Trim(string(data), `"`))
	if err != nil {
		return err
	}
	*t = Time(tt)
	return nil
}

func (t *Time) Set(tt time.Time) {
	*t = Time(tt)
}
